name: CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'

jobs:
  # Job 1: Code Quality and Linting
  lint-and-format:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run ESLint
        run: npm run lint || echo "‚ö†Ô∏è ESLint warnings present but not blocking deployment"

      - name: Check Prettier formatting
        run: npx prettier --check "**/*.{js,jsx,ts,tsx,json,css,md}"

      - name: TypeScript type checking
        run: npx tsc --noEmit

  # Job 2: Unit and Integration Tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint-and-format

    env:
      DATABASE_URL: ${{ secrets.NEON_DATABASE_URL }}
      NEXTAUTH_SECRET: test-secret-key-for-ci
      NEXTAUTH_URL: http://localhost:3000

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Setup test database
        run: |
          npx prisma generate
          npx prisma db push --force-reset

      - name: Verify database tables exist
        run: |
          npx prisma db execute --stdin <<< "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public';"
        continue-on-error: true

      - name: Seed test data (if seed script exists)
        run: |
          if [ -f "prisma/seed.ts" ] || [ -f "prisma/seed.js" ]; then
            npx prisma db seed
          fi
        continue-on-error: true

      - name: Run unit tests
        run: npm test
        continue-on-error: true

      - name: Run integration tests (if they exist)
        run: |
          if npm run | grep -q "test:integration"; then
            npm run test:integration
          fi
        continue-on-error: true

      - name: Generate test coverage
        run: |
          if npm run | grep -q "test:coverage"; then
            npm run test:coverage
          fi
        continue-on-error: true

  # Job 3: Build and Security Checks
  build-and-security:
    name: Build and Security
    runs-on: ubuntu-latest
    needs: lint-and-format

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Security audit
        run: npm audit --audit-level=high

      - name: Check for outdated packages
        run: npm outdated || true

      - name: Build application
        run: npm run build
        env:
          DATABASE_URL: postgresql://dummy:dummy@localhost:5432/dummy
          NEXTAUTH_SECRET: dummy-secret-for-build
          NEXTAUTH_URL: http://localhost:3000

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: .next/
          retention-days: 7

  # Job 4: Database Migration Tests
  database-migration:
    name: Database Migration Tests
    runs-on: ubuntu-latest
    needs: lint-and-format

    env:
      DATABASE_URL: ${{ secrets.NEON_DATABASE_URL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Run database migrations
        run: npx prisma migrate deploy

      - name: Validate database schema
        run: npx prisma validate

      - name: Test database seeding
        run: |
          if [ -f "prisma/seed.ts" ] || [ -f "prisma/seed.js" ]; then
            npx prisma db seed
          fi
        continue-on-error: true

      - name: Verify seeded data
        run: |
          npx prisma db execute --stdin <<< "SELECT COUNT(*) FROM \"User\" WHERE role = 'ADMIN';" || echo "No admin users found or table doesn't exist"
        continue-on-error: true

      - name: Test database reset and recreation
        run: |
          echo "Testing database reset..."
          npx prisma db push --force-reset --accept-data-loss
          echo "Reset completed, schema recreated with db push"
          echo "Testing seeding after reset..."
          npx prisma db seed

  # Job 5: End-to-End Tests (Optional)
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [build-and-security, test]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'

    env:
      DATABASE_URL: ${{ secrets.NEON_DATABASE_URL }}
      NEXTAUTH_SECRET: e2e-secret-key
      NEXTAUTH_URL: http://localhost:3000

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Install Playwright (if using)
        run: |
          if npm list @playwright/test > /dev/null 2>&1; then
            npx playwright install --with-deps
          fi
        continue-on-error: true

      - name: Setup database
        run: |
          npx prisma generate
          npx prisma db push --force-reset
          
      - name: Seed database for E2E tests
        run: |
          if [ -f "prisma/seed.ts" ] || [ -f "prisma/seed.js" ]; then
            npx prisma db seed
          fi
        continue-on-error: true

      - name: Build application
        run: npm run build

      - name: Start application
        run: npm start &
        env:
          PORT: 3000

      - name: Wait for application to start
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3000/api/health > /dev/null 2>&1; do sleep 2; done' || \
          timeout 60 bash -c 'until curl -f http://localhost:3000 > /dev/null 2>&1; do sleep 2; done'

      - name: Run E2E tests
        run: |
          if npm run | grep -q "test:e2e"; then
            npm run test:e2e
          elif npm run | grep -q "playwright"; then
            npx playwright test
          fi
        continue-on-error: true

  # Job 6: Deploy to Staging (on dev branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-security, test, database-migration]
    if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: .next/

      - name: Deploy to Staging
        run: |
          echo "üöÄ Deploying to staging environment..."
          # Add your staging deployment commands here
          # Examples:
          # - Deploy to Vercel: npx vercel --prod --token ${{ secrets.VERCEL_TOKEN }}
          # - Deploy to AWS: aws s3 sync .next s3://staging-bucket
          # - Deploy to Docker: docker build -t staging-app . && docker push staging-app
          echo "‚úÖ Staging deployment completed"

  # Job 7: Deploy to Production (on main branch)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-security, test, database-migration, e2e-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: .next/

      - name: Deploy to Production
        run: |
          echo "üöÄ Deploying to production environment..."
          # Add your production deployment commands here
          # Examples:
          # - Deploy to Vercel: npx vercel --prod --token ${{ secrets.VERCEL_TOKEN }}
          # - Deploy to AWS: aws s3 sync .next s3://production-bucket
          # - Deploy to Railway: railway deploy
          echo "‚úÖ Production deployment completed"

      - name: Notify deployment success
        run: |
          echo "üéâ Production deployment successful!"
          # Add notification logic here (Slack, Discord, etc.)

  # Job 8: Security and Performance Analysis
  security-analysis:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: lint-and-format
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Check for known vulnerabilities
        run: |
          if command -v snyk &> /dev/null; then
            npx snyk test || true
          fi

      - name: Analyze bundle size
        run: |
          if npm run | grep -q "analyze"; then
            npm run analyze
          fi
        continue-on-error: true

  # Job 9: Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
      - name: Clean up artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });
            
            for (const artifact of artifacts.data.artifacts) {
              if (artifact.name === 'build-files' && artifact.created_at < new Date(Date.now() - 24*60*60*1000)) {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id,
                });
              }
            } 