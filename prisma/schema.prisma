generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid())
  email           String           @unique
  passwordHash    String
  firstName       String?
  lastName        String?
  role            UserRole         @default(ADMIN)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  invitations     Invitation[]
  publicTestLinks PublicTestLink[]
  tests           Test[]
  archivedTests   Test[]           @relation("ArchivedTests")
}

model Test {
  id                      String           @id @default(uuid())
  title                   String
  description             String?
  lockOrder               Boolean          @default(false)
  overallTimeLimitSeconds Int
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt
  createdById             String
  allowReview             Boolean          @default(true)
  isArchived              Boolean          @default(false)
  archivedAt              DateTime?
  archivedById            String?
  emailNotificationsEnabled Boolean        @default(true)
  notificationEmails      String[]         @default(["prateek@combatrobotics.in", "gaurav@combatrobotics.in"])
  includeAnalytics        Boolean          @default(true)
  invitations             Invitation[]
  publicTestLinks         PublicTestLink[]
  questions               Question[]
  createdBy               User             @relation(fields: [createdById], references: [id])
  archivedBy              User?            @relation("ArchivedTests", fields: [archivedById], references: [id])
  testAttempts            TestAttempt[]
}

model PersonalityDimension {
  id          String     @id @default(uuid())
  name        String     @unique
  description String?
  code        String     @unique
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  questions   Question[]
}

model Question {
  id                     String                  @id @default(uuid())
  promptText             String
  promptImageUrl         String?
  timerSeconds           Int
  answerOptions          String[]
  correctAnswerIndex     Int?
  sectionTag             String?
  category               QuestionCategory
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  testId                 String
  answerWeights          Json?
  personalityDimensionId String?
  questionType           QuestionType            @default(OBJECTIVE)
  publicSubmittedAnswers PublicSubmittedAnswer[]
  personalityDimension   PersonalityDimension?   @relation(fields: [personalityDimensionId], references: [id])
  test                   Test                    @relation(fields: [testId], references: [id], onDelete: Cascade)
  submittedAnswers       SubmittedAnswer[]
}

model Invitation {
  id             String           @id @default(uuid())
  candidateEmail String?
  candidateName  String?
  expiresAt      DateTime
  status         InvitationStatus @default(PENDING)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  testId         String
  createdById    String
  createdBy      User             @relation(fields: [createdById], references: [id])
  test           Test             @relation(fields: [testId], references: [id], onDelete: Cascade)
  testAttempt    TestAttempt?
}

model TestAttempt {
  id                  String            @id @default(uuid())
  candidateName       String?
  candidateEmail      String?
  ipAddress           String?
  startedAt           DateTime          @default(now())
  completedAt         DateTime?
  status              TestAttemptStatus @default(IN_PROGRESS)
  rawScore            Int?
  percentile          Float?
  categorySubScores   Json?
  tabSwitches         Int               @default(0)
  proctoringEnabled   Boolean           @default(true)
  videoRecordingUrl   String?
  audioRecordingUrl   String?
  proctoringEvents    Json?
  faceCapturesUrls    String[]          @default([])
  screenRecordingUrl  String?
  proctoringStartedAt DateTime?
  proctoringEndedAt   DateTime?
  permissionsGranted  Boolean           @default(false)
  riskScore           Float?
  currentQuestionIndex Int?             @default(0)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  invitationId        String            @unique
  testId              String
  personalityProfile  Json?
  personalityScores   Json?
  proctorAssets       ProctorAsset[]
  proctorEvents       ProctorEvent[]
  submittedAnswers    SubmittedAnswer[]
  invitation          Invitation        @relation(fields: [invitationId], references: [id], onDelete: Cascade)
  test                Test              @relation(fields: [testId], references: [id], onDelete: Cascade)
}

model SubmittedAnswer {
  id                  String      @id @default(uuid())
  selectedAnswerIndex Int?
  isCorrect           Boolean?
  timeTakenSeconds    Int
  submittedAt         DateTime    @default(now())
  testAttemptId       String
  questionId          String
  question            Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  testAttempt         TestAttempt @relation(fields: [testAttemptId], references: [id], onDelete: Cascade)

  @@unique([testAttemptId, questionId])
}

model ProctorEvent {
  id          String      @id @default(cuid())
  attemptId   String
  type        String
  ts          DateTime    @default(now())
  extra       Json?
  testAttempt TestAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
}

model ProctorAsset {
  id          String      @id @default(cuid())
  attemptId   String
  kind        String
  fileName    String
  mimeType    String
  fileSize    Int
  data        Bytes
  ts          DateTime    @default(now())
  testAttempt TestAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
}

model PublicTestLink {
  id          String              @id @default(uuid())
  testId      String
  linkToken   String              @unique
  title       String?
  description String?
  isActive    Boolean             @default(true)
  expiresAt   DateTime?
  maxUses     Int?
  usedCount   Int                 @default(0)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  createdById String
  attempts    PublicTestAttempt[]
  createdBy   User                @relation(fields: [createdById], references: [id])
  test        Test                @relation(fields: [testId], references: [id], onDelete: Cascade)
}

model PublicTestAttempt {
  id                  String                  @id @default(uuid())
  publicLinkId        String
  candidateName       String
  candidateEmail      String
  ipAddress           String?
  startedAt           DateTime                @default(now())
  completedAt         DateTime?
  status              TestAttemptStatus       @default(IN_PROGRESS)
  rawScore            Int?
  percentile          Float?
  categorySubScores   Json?
  tabSwitches         Int                     @default(0)
  proctoringEnabled   Boolean                 @default(true)
  videoRecordingUrl   String?
  audioRecordingUrl   String?
  proctoringEvents    Json?
  faceCapturesUrls    String[]                @default([])
  screenRecordingUrl  String?
  proctoringStartedAt DateTime?
  proctoringEndedAt   DateTime?
  permissionsGranted  Boolean                 @default(false)
  riskScore           Float?
  currentQuestionIndex Int?                   @default(0)
  createdAt           DateTime                @default(now())
  updatedAt           DateTime                @updatedAt
  personalityProfile  Json?
  personalityScores   Json?
  proctorAssets       PublicProctorAsset[]
  proctorEvents       PublicProctorEvent[]
  submittedAnswers    PublicSubmittedAnswer[]
  publicLink          PublicTestLink          @relation(fields: [publicLinkId], references: [id], onDelete: Cascade)
}

model PublicSubmittedAnswer {
  id                  String            @id @default(uuid())
  selectedAnswerIndex Int?
  isCorrect           Boolean?
  timeTakenSeconds    Int
  submittedAt         DateTime          @default(now())
  attemptId           String
  questionId          String
  attempt             PublicTestAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question            Question          @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([attemptId, questionId])
}

model PublicProctorEvent {
  id        String            @id @default(cuid())
  attemptId String
  type      String
  ts        DateTime          @default(now())
  extra     Json?
  attempt   PublicTestAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
}

model PublicProctorAsset {
  id          String            @id @default(cuid())
  attemptId   String
  kind        String
  fileName    String
  mimeType    String
  fileSize    Int
  data        Bytes
  ts          DateTime          @default(now())
  attempt     PublicTestAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
}

model UploadedFile {
  id        String   @id @default(cuid())
  fileName  String
  mimeType  String
  fileSize  Int
  data      Bytes
  fileType  String   // 'QUESTION_IMAGE', 'RECORDING', etc.
  uploadedAt DateTime @default(now())
  uploadedBy String?  // User ID who uploaded (optional for anonymous)
}

enum UserRole {
  ADMIN
  SUPER_ADMIN
}

enum InvitationStatus {
  PENDING
  SENT
  OPENED
  COMPLETED
  EXPIRED
  CANCELLED
}

enum TestAttemptStatus {
  IN_PROGRESS
  COMPLETED
  TIMED_OUT
  ABANDONED
}

enum QuestionCategory {
  LOGICAL
  VERBAL
  NUMERICAL
  ATTENTION_TO_DETAIL
  OTHER
}

enum QuestionType {
  OBJECTIVE
  PERSONALITY
}
